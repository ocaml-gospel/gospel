
*******************************
********** Parsed file ********
*******************************
type t = {
  f: int }
val f : int -> int[@@gospel {| pure |}]
val g : int -> int[@@gospel {| y = g x
    requires f x > 0 |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

type t = {
f: int }
  

val f : int -> int
(*@ pure
     *)

val g : int -> int
(*@ y = g x
    requires ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module pure.mli

  Namespace: pure.mli
    Type symbols
       t
      
    Logic Symbols
      function constr#t (_:int) : t
      function f (_:int) : int
      
    Field Symbols
      function f_1 (_:t) : int
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    type t = {f_1:int}
          function constr#t (_:int) : t
          function f_1 (_:t) : int
         
    
    val f : int -> int
    (*@ result:int = f $x0:int
        pure*)
    
    val g : int -> int
    (*@ y:int = g x:int
        requires ((integer_of_int  (f  x:int):int):integer > 0:integer):prop*)

OK
