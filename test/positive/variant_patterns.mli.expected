
*******************************
********** Parsed file ********
*******************************
type t =
  | A 
  | B of int 
  | C of int * int 
  | D of (int * int) 
exception E of int * int 
exception F of (int * int) 
val f : int -> t -> bool[@@gospel
                          {| b = f n t
    requires t = D (n, n)
    requires t = C (n, n)
    requires let x = (n, n) in D x = D x
    (* requires let x = (n, n) in C x = C x *)
    requires match t with
             | A
             | B _
             | C (_, _)
             | C _
             | D (_, _)
             | D ((_, _))
             | D _ -> true
    (* raises E _ -> false *)
    raises F _ -> true
    raises E (_, _) -> true
    raises F (_, _) -> true |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

type t =
| A 
| B of int 
| C of int * int 
| D of (int * int) 
  

exception E of int * int 

exception F of (int * int) 

val f : int -> t -> bool
(*@ b = f n t
    requires ...
    requires ...
    requires ...
    requires ...
    with ...
    with ...
    with ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module variant_patterns.mli

  Namespace: variant_patterns.mli
    Type symbols
       t
      
    Logic Symbols
      function A  : t
      function B (_:int) : t
      function C (_:int) (_:int) : t
      function D (_:int * int) : t
      
    Field Symbols
      
    Exception Symbols
      E
      F
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    type t = A of 
             function A  : t
             | B of int
               function B (_:int) : t
             | C of int * int
               function C (_:int) (_:int) : t
             | D of int * int
               function D (_:int * int) : t
         
    
    exception E
    
    exception F
    
    val f : int -> t -> bool
    (*@ b:bool = f n:int t_1:t
        requires (t_1:t = (D  (tuple2  n:int n:int):int * int):t):prop
                 requires (t_1:t = (C  n:int n:int):t):prop
                 requires let x:int * int = (tuple2 
                          n:int n:int):int * int in ((D  x:int * int):
                          t = (D  x:int * int):t):prop
                 requires (match t_1:t with
                          | A | B _ | C _ _ | C _ _ | D (_, _) | D (_, _) | D
                            _ -> (True ):bool
                          end::bool = (True ):bool):prop
        raisesF _, _ -> true:prop
        raisesE _, _ -> true:prop
        raisesF _ -> true:prop*)

OK
