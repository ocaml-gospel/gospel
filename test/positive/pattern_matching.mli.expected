
*******************************
********** Parsed file ********
*******************************
type t =
  | O 
  | S of t 
val succ : t -> t[@@gospel {| y = succ x
    ensures y = S x |}]
val test1 : t -> t -> t[@@gospel
                         {| r = test1 x y
    requires x <> O && y = O
    ensures  match x, y with
             | _, S _ -> false
             | O, _   -> false
             | S a, O -> r = S (S a) |}]
val f_unit : int array -> unit[@@gospel
                                {| x1 = f_unit a
     modifies a
     ensures match x1 with () -> true |}]
[@@@gospel
  {| function fun_unit (x: unit): string =
    match x with
    | () -> "out" |}]
type t2 =
  | B of int * int 
[@@@gospel {| function f (x: t2) : unit =
    match x with B _ -> () |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

type t =
| O 
| S of t 
  

val succ : t -> t
(*@ y = succ x
    ensures ...
     *)

val test1 : t -> t -> t
(*@ r = test1 x y
    requires ...
    ensures ...
     *)

val f_unit : int array -> unit
(*@ x1 = f_unit a
    ensures ...
    modifies ...
     *)

(*@ function fun_unit ... *)

type t2 =
| B of int * int 
  

(*@ function f ... *)

*******************************
********* Typed GOSPEL ********
*******************************
module pattern_matching.mli

  Namespace: pattern_matching.mli
    Type symbols
       t
       t2
      
    Logic Symbols
      function B (_:int) (_:int) : t2
      function O  : t
      function S (_:t) : t
      function f (_:t2) : unit
      function fun_unit (_:unit) : string
      
    Field Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    type t = O of 
             function O  : t
             | S of t
               function S (_:t) : t
         
    
    val succ : t -> t
    (*@ y:t = succ x:t
        ensures (y:t = (S  x:t):t):prop*)
    
    val test1 : t -> t -> t
    (*@ r:t = test1 x_1:t y_1:t
        requires not (x_1:t = (O ):t):prop && (y_1:t = (O ):t):prop
        ensures (match (tuple2 
                x_1:t y_1:t):t * t with
                | _, S _ -> (False ):bool
                | O, _ -> (False ):bool
                | S a:t, O -> if (r:t = (S 
                              (S  a:t):t):t):prop then (True ):bool else (False ):
                              bool
                end::bool = (True ):bool):prop*)
    
    val f_unit : int array -> unit
    (*@ x1:unit = f_unit a_1:int array
        ensures (match x1:unit with
                |  -> (True ):bool
                end::bool = (True ):bool):prop
        writes a_1:int array*)
    
    (*@ function fun_unit (x_2:unit): string =
        match x_2:unit with
        |  -> "out":string
        end::string
    *)
    
    type t2 = B of int * int
              function B (_:int) (_:int) : t2
         
    
    (*@ function f (x_3:t2): unit =
        match x_3:t2 with
        | B _ _ -> (unit_1 ):unit
        end::unit
    *)

OK
